<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>chekos&#39; webblog</title><description>chekos&#39; weblog</description><link>https://chekos.dev/</link><atom:link href="https://chekos.dev/feed_rss_created.xml" rel="self" type="application/rss+xml" /><managingEditor>chekos</managingEditor><language>en</language> <pubDate>Sun, 20 Jul 2025 18:54:23 -0000</pubDate> <lastBuildDate>Sun, 20 Jul 2025 18:54:23 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.16.0</generator> <item> <title>Of Brasas &amp;amp; Nube</title> <category>ai</category> <category>ai-tools</category> <category>development</category> <category>parallel-time</category> <category>productivity</category> <category>reflection</category> <category>technology</category> <description>&lt;h1&gt;Of Brasas &amp;amp; Nube&lt;/h1&gt;&lt;p&gt;!!! note &#34;Translation Note&#34; This is an English translation of a piece originally published in Spanish on the [Tacos de Datos Substack...&lt;/p&gt;</description><link>https://chekos.dev/2025/07/of-brasas--nube/</link> <pubDate>Sun, 20 Jul 2025 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2025/07/of-brasas--nube/</guid> <enclosure url="https://chekos.dev/assets/images/social/2025/07/of-brasas--nube.png" type="image/png" length="None" /> </item> <item> <title>how to trigger a gh-action only if the issue is created by the repo owner</title> <category>devops</category> <category>gh-actions</category> <category>til</category> <description>&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can add an &lt;code&gt;if&lt;/code&gt; key to a job to conditionally run jobs. you also have a lot of metadata available in github actions regarding the event that triggered it and the repo it is on. &lt;/p&gt;&lt;p&gt;put together you can add a condition like:&lt;code&gt;yaml title=&#34;.github/workflows/issue-to-md.yml&#34;...job: job_name: runs_on: ubuntu if: ${{ github.event.issue.user.login == github.repository_owner }}...&lt;/code&gt;&lt;/p&gt;</description><link>https://chekos.dev/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner/</link> <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner/</guid> <enclosure url="https://chekos.dev/assets/images/social/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner.png" type="image/png" length="None" /> </item> <item> <title>i just set up `alias uvr = &#34;uv run&#34;`</title> <category>python</category> <category>til</category> <category>uv</category> <description>&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;i just set up a new alias to save some time when using &lt;code&gt;uv&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bash title=&#34;~/.oh-my-zsh/custom/uv.zsh&#34;alias uvr = &#34;uv run&#34;&lt;/code&gt;&lt;/p&gt;</description><link>https://chekos.dev/2024/11/i-just-set-up-alias-uvr--uv-run/</link> <pubDate>Fri, 15 Nov 2024 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2024/11/i-just-set-up-alias-uvr--uv-run/</guid> <enclosure url="https://chekos.dev/assets/images/social/2024/11/i-just-set-up-alias-uvr--uv-run.png" type="image/png" length="None" /> </item> <item> <title>using typer and uv to run a script with inline dependencies</title> <category>micro-packages</category> <category>python</category> <category>til</category> <category>uv</category> <description>&lt;h1&gt;using typer and uv to run a script with inline dependencies&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;because &lt;code&gt;uv&lt;/code&gt; supports running scripts with dependencies declared in inline metadata and &lt;code&gt;typer&lt;/code&gt; can turn any function into a cli you can put both of them together and build some really powerful small utilities. all you need is to define a function and wrap it in &lt;code&gt;typer.run()&lt;/code&gt; in a script with &lt;code&gt;typer&lt;/code&gt; as a dependency in the inline metadata.&lt;/p&gt;&lt;p&gt;after some iterations, this is the final script (so far):&lt;/p&gt;&lt;p&gt;```python title=&#34;issue-to-md.py&#34;&lt;/p&gt;&lt;h1&gt;/// script&lt;/h1&gt;&lt;h1&gt;dependencies = [&lt;/h1&gt;&lt;h1&gt;&#34;typer&#34;,&lt;/h1&gt;&lt;h1&gt;&#34;rich&#34;,&lt;/h1&gt;&lt;h1&gt;&#34;pyyaml&#34;,&lt;/h1&gt;&lt;h1&gt;]&lt;/h1&gt;&lt;h1&gt;///&lt;/h1&gt;&lt;p&gt;import jsonimport refrom datetime import datetimefrom pathlib import Pathfrom zoneinfo import ZoneInfo&lt;/p&gt;&lt;p&gt;import typerimport yamlfrom rich import printfrom typing_extensions import Annotated&lt;/p&gt;&lt;p&gt;def generate_post_from_issue( issue_title: Annotated[str, typer.Option(&#34;--title&#34;, &#34;-t&#34;)], issue_body: Annotated[str, typer.Option(&#34;--body&#34;, &#34;-b&#34;)], issue_labels: Annotated[str, typer.Option(&#34;--labels&#34;, &#34;-l&#34;)], issue_created_at: Annotated[str, typer.Option(&#34;--created-at&#34;, &#34;-c&#34;)], base_dir: Annotated[str, typer.Option(&#34;--base-dir&#34;, &#34;-d&#34;)] = &#34;blog/posts&#34;,): # Convert labels to a list of tags tags = [label[&#34;name&#34;] for label in json.loads(issue_labels)]&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# Convert ISSUE_CREATED_AT to PST and format as YYYY-MM-DDutc_time = datetime.strptime(issue_created_at, &#34;%Y-%m-%dT%H:%M:%SZ&#34;)pst_time = utc_time.astimezone(ZoneInfo(&#34;America/Los_Angeles&#34;))created_at_pst = pst_time.date()# Extract the category from the part of the title before the first colon, default to &#34;project&#34; if nonecategory = ( issue_title.split(&#34;:&#34;)[0].strip().lower() if &#34;:&#34; in issue_title else &#34;project&#34;)# Extract the title content after the first colontitle = ( issue_title.split(&#34;:&#34;, 1)[1].strip() if &#34;:&#34; in issue_title else issue_title.strip())# Determine directory based on categorydir_path = Path(base_dir) / (&#34;til&#34; if category == &#34;til&#34; else &#34;&#34;)dir_path.mkdir(parents=True, exist_ok=True)# Generate a slugified version of the title for the filenameslug = re.sub(r&#34;[^a-z0-9]+&#34;, &#34;-&#34;, title.lower()).strip(&#34;-&#34;)# Create the front matter dictionaryfront_matter = { &#34;title&#34;: title, &#34;date&#34;: created_at_pst, &#34;categories&#34;: [category], &#34;tags&#34;: tags,}# Prepare YAML front matter and issue bodyyaml_front_matter = yaml.dump(front_matter, default_flow_style=False)content = f&#34;---\n{yaml_front_matter}---\n\n{issue_body}&#34;# Define filenamefilename = dir_path / f&#34;{slug}.md&#34;# Write content to filefilename.write_text(content, encoding=&#34;utf-8&#34;)print(f&#34;Markdown file created: {filename}&#34;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &#34;&lt;strong&gt;main&lt;/strong&gt;&#34;: typer.run(generate_post_from_issue)```&lt;/p&gt;&lt;p&gt;feels like a micro-package.&lt;/p&gt;</description><link>https://chekos.dev/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies/</link> <pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies/</guid> <enclosure url="https://chekos.dev/assets/images/social/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies.png" type="image/png" length="None" /> </item> <item> <title>creating til posts from github issues using github actions</title> <category>til</category> <description>&lt;h1&gt;creating til posts from github issues using github actions&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can automate creating a new markdown file in a directory in your repo with front matter metadata from github issues. you can then create a pull request to deploy those changes to your main branch. my plan is to use this to capture more ideas on the go (on my phone).&lt;/p&gt;&lt;p&gt;```yaml title=&#34;.github/workflows/issue-to-md.yml&#34;name: Create Post from Issue&lt;/p&gt;&lt;p&gt;permissions: contents: write pull-requests: write&lt;/p&gt;&lt;p&gt;on: issues: types: [opened]&lt;/p&gt;&lt;p&gt;jobs: create-post: runs-on: ubuntu-latest&lt;/p&gt;&lt;pre&gt;&lt;code&gt;steps: - name: Checkout repository uses: actions/checkout@v4 - name: Generate Post from Issue env: ISSUE_NUMBER: ${{ github.event.issue.number }} ISSUE_TITLE: ${{ github.event.issue.title }} ISSUE_BODY: ${{ github.event.issue.body }} ISSUE_LABELS: ${{ toJson(github.event.issue.labels) }} ISSUE_CREATED_AT: ${{ github.event.issue.created_at }} run: | # Convert labels to a list of tags TAGS=$(echo $ISSUE_LABELS | jq -r &#39;.[] | .name&#39; | paste -sd, -) # Convert ISSUE_CREATED_AT to PST and format as YYYY-MM-DD CREATED_AT_PST=$(TZ=&#34;America/Los_Angeles&#34; date -d &#34;${ISSUE_CREATED_AT}&#34; +&#34;%Y-%m-%d&#34;) # Extract the category from the part of the title before the first colon, default to &#34;project&#34; if none CATEGORY=$(echo &#34;$ISSUE_TITLE&#34; | awk -F: &#39;{print $1}&#39; | tr -d &#39;[:space:]&#39; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;) if [ -z &#34;$CATEGORY&#34; ]; then CATEGORY=&#34;project&#34; fi # Extract the title content after the first colon TITLE=$(echo &#34;$ISSUE_TITLE&#34; | sed &#39;s/^[^:]*: *//&#39;) # Determine directory based on category if [ &#34;$CATEGORY&#34; = &#34;til&#34; ]; then DIR=&#34;blog/posts/til&#34; else DIR=&#34;blog/posts&#34; fi echo $DIR &amp;gt;&amp;gt; $GITHUB_STEP_SUMMARY echo $CATEGORY &amp;gt;&amp;gt; $GITHUB_STEP_SUMMARY # Generate a slugified version of the title for the filename SLUG=$(echo &#34;$TITLE&#34; | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39; | tr -cs &#39;[:alnum:]&#39; &#39;-&#39; | sed &#39;s/^-//;s/-$//&#39;) echo $SLUG &amp;gt;&amp;gt; $GITHUB_STEP_SUMMARY # Create the front matter with category, tags, and formatted date FRONT_MATTER=&#34;---\ntitle: \&#34;$TITLE\&#34;\ndate: ${CREATED_AT_PST}\ncategories: [${CATEGORY}]\ntags: [${TAGS}]\n---&#34; # Prepare content for markdown file CONTENT=&#34;$FRONT_MATTER\n\n$ISSUE_BODY&#34; # Save the content to a markdown file FILENAME=&#34;${DIR}/${SLUG}.md&#34; echo $FILENAME &amp;gt;&amp;gt; $GITHUB_STEP_SUMMARY echo -e &#34;$CONTENT&#34; &amp;gt; &#34;$FILENAME&#34; - name: Commit and push changes env: ISSUE_TITLE: ${{ github.event.issue.title }} ISSUE_NUMBER: ${{ github.event.issue.number }} GH_TOKEN: ${{ github.token }} run: | git config --local user.name &#34;github-actions[bot]&#34; git config --local user.email &#34;github-actions[bot]@users.noreply.github.com&#34; git checkout -b add-post-$ISSUE_NUMBER git add . git commit -m &#34;Add post for Issue: $ISSUE_TITLE&#34; git push -u origin add-post-$ISSUE_NUMBER gh pr create --title &#34;#$ISSUE_NUMBER - $ISSUE_TITLE&#34; --body &#34;Adding new post. Closes #$ISSUE_NUMBER&#34;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;</description><link>https://chekos.dev/2024/11/creating-til-posts-from-github-issues-using-github-actions/</link> <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2024/11/creating-til-posts-from-github-issues-using-github-actions/</guid> <enclosure url="https://chekos.dev/assets/images/social/2024/11/creating-til-posts-from-github-issues-using-github-actions.png" type="image/png" length="None" /> </item> <item> <title>Running sudo commands without password on VPS</title> <category>shell</category> <category>til</category> <category>vps</category> <description>&lt;h1&gt;running sudo commands without password on VPS&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can configure your VPS / server to be able to run &lt;code&gt;sudo&lt;/code&gt; commands without being asked for your password. you just need to create a sudoers file. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;first you have to create sudoers file&lt;code&gt;bashsudo visudo -f /etc/sudoers.d/$USER&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;when i asked chatgpt for this i found you can just run &lt;code&gt;sudo visudo&lt;/code&gt; and it’ll open the sudoers file. &lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;now, let’s say you have a user &lt;code&gt;app&lt;/code&gt; that you want to be able to run &lt;code&gt;apt update&lt;/code&gt; and &lt;code&gt;apt upgrade&lt;/code&gt; without asking for &lt;code&gt;sudo&lt;/code&gt; password. you need to add this line to your sudoers file&lt;code&gt;bashapp ALL=(ALL) NOPASSWD:/usr/bin/apt update, /usr/bin/apt upgrade&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;how it works&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;app&lt;/code&gt; - the username on the system &lt;/li&gt;&lt;li&gt;&lt;code&gt;ALL=(ALL)&lt;/code&gt; - this means this rule to all hosts and allows acting as any user&lt;/li&gt;&lt;li&gt;&lt;code&gt;NOPASSWD&lt;/code&gt; - no password&lt;/li&gt;&lt;li&gt;&lt;code&gt;/usr/bin/apt update&lt;/code&gt; - you must pass the full path for the commands you want to run without a password. &lt;/li&gt;&lt;/ol&gt;</description><link>https://chekos.dev/2024/11/running-sudo-commands-without-password-on-vps/</link> <pubDate>Tue, 12 Nov 2024 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2024/11/running-sudo-commands-without-password-on-vps/</guid> <enclosure url="https://chekos.dev/assets/images/social/2024/11/running-sudo-commands-without-password-on-vps.png" type="image/png" length="None" /> </item> <item> <title>how to open specific channel in Slack app using Stream Deck</title> <category>automation</category> <category>streamdeck</category> <category>til</category> <description>&lt;h1&gt;how to open specific channel in Slack app using Stream Deck&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can open a specific channel/DM conversation on the slack app using the open website action on stream deck but pointing ot to &lt;code&gt;slack://channel?team=&amp;lt;Workspace ID&amp;gt;&amp;amp;id=&amp;lt;Channel / teammate ID&amp;gt;&lt;/code&gt;. &lt;/p&gt;</description><link>https://chekos.dev/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck/</link> <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck/</guid> <enclosure url="https://chekos.dev/assets/images/social/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck.png" type="image/png" length="None" /> </item> <item> <title>Setting Up Ffmpeg As Lambda Layer</title> <category>aws</category> <category>ffmpeg</category> <category>serverless</category> <category>til</category> <description>&lt;h1&gt;how to set up &lt;code&gt;ffmpeg&lt;/code&gt; as a lambda layer&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;how to add &lt;code&gt;ffmpeg&lt;/code&gt; and &lt;code&gt;ffprobe&lt;/code&gt; as a lambda layer to be used by lambda functions.&lt;/p&gt;&lt;h3&gt;Getting ffmpeg&lt;/h3&gt;&lt;p&gt;```shell&lt;/p&gt;&lt;h1&gt;ffmpeg&lt;/h1&gt;&lt;p&gt;wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz&lt;/p&gt;&lt;h1&gt;checksum&lt;/h1&gt;&lt;p&gt;wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz.md5&lt;/p&gt;&lt;p&gt;md5sum -c ffmpeg-release-amd64-static.tar.xz.md5&lt;/p&gt;&lt;h1&gt;extract&lt;/h1&gt;&lt;p&gt;tar xvf ffmpeg-release-amd64-static.tar.xz```&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: i had to &lt;code&gt;brew install md5sha1sum&lt;/code&gt; and &lt;code&gt;brew install wget&lt;/code&gt; on my local laptop&lt;/p&gt;&lt;h3&gt;Creating Lambda Layer&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;create &lt;code&gt;ffmpeg/bin/&lt;/code&gt;&lt;/li&gt;&lt;li&gt;copy &lt;code&gt;ffmpeg&lt;/code&gt; into it&lt;/li&gt;&lt;li&gt;zip &lt;code&gt;ffmpeg/&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;```shell&lt;/p&gt;&lt;h1&gt;Create bin/&lt;/h1&gt;&lt;p&gt;mkdir -p ffmpeg/bin&lt;/p&gt;&lt;h1&gt;Copy ffmpeg&lt;/h1&gt;&lt;p&gt;cp ffmpeg-6.0-amd64-static/ffmpeg ffmpeg/bin&lt;/p&gt;&lt;h1&gt;Zip directory&lt;/h1&gt;&lt;p&gt;cd ffmpegzip -r ../ffmpeg.zip .```&lt;/p&gt;&lt;h3&gt;Finally&lt;/h3&gt;&lt;p&gt;Upload zip file as a lambda layer.&lt;/p&gt;&lt;h3&gt;Bonus&lt;/h3&gt;&lt;p&gt;In my case I also included &lt;code&gt;ffprobe&lt;/code&gt; as it&#39;s also required for &lt;code&gt;whisper&lt;/code&gt;.&lt;/p&gt;</description><link>https://chekos.dev/2023/04/setting-up-ffmpeg-as-lambda-layer/</link> <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2023/04/setting-up-ffmpeg-as-lambda-layer/</guid> <enclosure url="https://chekos.dev/assets/images/social/2023/04/setting-up-ffmpeg-as-lambda-layer.png" type="image/png" length="None" /> </item> <item> <title>How To Copy Json Straight To Clipboard From The Terminal</title> <category>jq</category> <category>shell</category> <category>til</category> <description>&lt;h1&gt;how to copy json to clipboard from the terminal&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;Piping output to &lt;code&gt;pbcopy&lt;/code&gt; to copy and paste output from the terminal&lt;/p&gt;&lt;p&gt;Here&#39;s how I can grab the last 10 elements of a JSON array and copy them to my clipboard.&lt;/p&gt;&lt;p&gt;&lt;code&gt;shelljq &#39;.[-10:]&#39; mydata.json | pbcopy&lt;/code&gt;&lt;/p&gt;</description><link>https://chekos.dev/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal/</link> <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal/</guid> <enclosure url="https://chekos.dev/assets/images/social/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal.png" type="image/png" length="None" /> </item> <item> <title>How To Create An Alias In The gh-cli</title> <category>automation</category> <category>gh</category> <category>til</category> <description>&lt;h1&gt;how to create an alias in the &lt;code&gt;gh&lt;/code&gt; CLI&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can create aliases in the GitHub CLI. i&#39;m not super familiar with aliases. i&#39;ve used them in the past to automate long commands.currently i&#39;m using a couple at work to shorten &lt;code&gt;dbt&lt;/code&gt; commmands ever so slightly (from &lt;code&gt;dbt run --target prod --select &amp;lt;models&amp;gt;&lt;/code&gt; to &lt;code&gt;prod-run &amp;lt;selection query&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;however, i had only seen these as aliases one sets up at the &lt;em&gt;profile&lt;/em&gt; level/scope. as in, we&#39;d go to &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.zsh_profile&lt;/code&gt; and add a new alias that&#39;s set every time we open a new terminal.&lt;/p&gt;&lt;p&gt;this is the first time i see a cli offer that &lt;em&gt;within&lt;/em&gt; the tool itself. i wonder if this is a common practice i&#39;ve missed until now.&lt;/p&gt;&lt;p&gt;in the GitHub cli you can use the command &lt;code&gt;alias set&lt;/code&gt; to set an alias (&lt;a href=&#34;https://cli.github.com/manual/gh_alias_set&#34;&gt;docs&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;i usually have to google the full list of flags i would like to run when creating a repo via the &lt;code&gt;gh-cli&lt;/code&gt; so i figured i&#39;d save it as an alias now. this is why i ~~wish i remembered~~ would like to run most times:&lt;/p&gt;&lt;p&gt;&lt;code&gt;shellgh repo create &amp;lt;name&amp;gt; \--public \--add-readme \--clone \--gitignore Python \--license bsd-3-clause-clear&lt;/code&gt;&lt;/p&gt;&lt;p&gt;simply &lt;em&gt;create a public repo named &lt;name&gt; include a ReadME, a license and a gitignore file and finally clone it to the local directory.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;i might add the &lt;code&gt;--disable-wiki&lt;/code&gt; simply because i don&#39;t use the wikis.&lt;/p&gt;&lt;p&gt;from the docs:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;The expansion may specify additional arguments and flags. If the expansion includes positional placeholders such as &#34;$1&#34;, extra arguments that follow the alias will be inserted appropriately. Otherwise, extra arguments will be appended to the expanded command.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;so what i did was run&lt;/p&gt;&lt;p&gt;&lt;code&gt;shellgh alias set pyrepo &#39;repo create &#34;$1&#34; --public --add-readme --clone --gitignore=Python --license=bsd-3-clause-clear&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;and if i choose to i can add a description by adding &lt;code&gt;-d &#34;my repos description&#34;&lt;/code&gt; right after &lt;code&gt;gh pyrepo &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;</description><link>https://chekos.dev/2022/12/how-to-create-an-alias-in-the-gh-cli/</link> <pubDate>Wed, 28 Dec 2022 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2022/12/how-to-create-an-alias-in-the-gh-cli/</guid> <enclosure url="https://chekos.dev/assets/images/social/2022/12/how-to-create-an-alias-in-the-gh-cli.png" type="image/png" length="None" /> </item> <item> <title>Using Github Actions To Produce Example Images Of Code</title> <category>gh-actions</category> <category>notion</category> <category>python</category> <category>quarto</category> <category>til</category> <description>&lt;h1&gt;how to use gh-actions to produce example images of code&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;I learned to chain a lot of small tools using GitHub Actions to produce ready-to-share images of code examples for social media (namely, instagram and twitter) from my phone. The steps, generally speaking, go as follows:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a new page on a Notion Database. Probably will create a specific template for this, like I do with TIL’s but it’s not necessary.&lt;/li&gt;&lt;li&gt;GitHub Action: Use my &lt;code&gt;markdownify-notion&lt;/code&gt; python package to write the markdown version of this page and save it on a “quarto project” folder. This let’s me use one general front-matter yaml file for all files rather than automate adding front matter to each file. I can still add specific front matter to files if I want to. (this TIL is an example of how this works - I’m writing it on Notion on my phone.)&lt;/li&gt;&lt;li&gt;GitHub Action: Use Quarto to render this markdown file &lt;code&gt;--to html&lt;/code&gt; and save it on an “output” directory. This will execute the code in the code cells and save the output inline.&lt;/li&gt;&lt;li&gt;GitHub Action: Use &lt;code&gt;shot-scraper&lt;/code&gt; to produce two files: a png screenshot and a pdf file. I’m using &lt;code&gt;shot-scraper&lt;/code&gt; for the PDF as well rather than using quarto because it’s easier and I am not in need of customizing this pdf file at all just yet. I’m creating it and saving it essentially just because I can, it’s easy, and might find use for it later.&lt;/li&gt;&lt;li&gt;GitHub Action: Once there are new png or pdf files in the “output” directory, I then use &lt;code&gt;s3-credentials&lt;/code&gt; to &lt;em&gt;put&lt;/em&gt; those &lt;em&gt;objects&lt;/em&gt; on a S3 bucket I also created using &lt;code&gt;s3-credentials&lt;/code&gt; . This tool is fantastic s3-credentials.readthedocs.io&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This is how the final image looks like&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;9EB00936-09DE-4836-93B6-8504E7E036A8&#34; src=&#34;https://s3.us-west-2.amazonaws.com/secure.notion-static.com/04380cef-2bfc-43f9-a2af-5feed89f0ac4/9EB00936-09DE-4836-93B6-8504E7E036A8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20221216%2Fus-west-2%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20221216T205710Z&amp;amp;X-Amz-Expires=3600&amp;amp;X-Amz-Signature=fa6ba352215a639f6a8d3c89cb72397e0d310da5ef891c439e528def853f20dc&amp;amp;X-Amz-SignedHeaders=host&amp;amp;x-id=GetObject&#34;&gt;&lt;/p&gt;</description><link>https://chekos.dev/2022/08/using-github-actions-to-produce-example-images-of-code/</link> <pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2022/08/using-github-actions-to-produce-example-images-of-code/</guid> <enclosure url="https://chekos.dev/assets/images/social/2022/08/using-github-actions-to-produce-example-images-of-code.png" type="image/png" length="None" /> </item> <item> <title>How To Solve Permission Error From Airflow Official Docker Image</title> <category>airflow</category> <category>docker</category> <category>python</category> <category>til</category> <description>&lt;h1&gt;how to solve permission error from airflow official docker image&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;tl;dr: when you use the Airflow official docker image you need to make sure that the variable &lt;code&gt;AIRFLOW_UID&lt;/code&gt; is set to match &lt;strong&gt;your&lt;/strong&gt; UID (and &lt;code&gt;AIRFLOW_GID=0&lt;/code&gt; aka &lt;code&gt;root&lt;/code&gt; ) or you’re going to get permission errors.i was working on deploying Airflow on a VM at work this week and I got a permission error (Errno 13) regarding the containers’ python’s logging config. When I first started working with this &lt;code&gt;docker-compose.yml&lt;/code&gt; i used the suggested &lt;code&gt;echo -e &#34;AIRFLOW_UID=$(id -u)&#34; &amp;gt; .env&lt;/code&gt; command which provided my user id (let’s say it’s &lt;strong&gt;506&lt;/strong&gt; ) from my local machine and assigned it to the &lt;code&gt;AIRFLOW_UID&lt;/code&gt; key. Now that i am working in the VM and have extended my &lt;code&gt;.env&lt;/code&gt; file to include other information i figured i could just use a copy of the same file. Everything else works fine except airflow cannot write logs because the user in this virtual machine with user id &lt;strong&gt;506&lt;/strong&gt; does not have permission to write to this &lt;code&gt;./logs/&lt;/code&gt; directory.If you google this error i found — among a sea of &lt;em&gt;almost&lt;/em&gt; right answers — that most of the solutions online are variations of “change the logs folder’s permissions to 777” meaning anyone can read, write, and execute the contents of the logs. That works. However, you don’t really need &lt;em&gt;everyone&lt;/em&gt; to be able to read and write — just this airflow user.Updating the UID on the VM’s &lt;code&gt;.env&lt;/code&gt; file worked perfectly without having to mess with the permissions.&lt;/p&gt;</description><link>https://chekos.dev/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image/</link> <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image/</guid> <enclosure url="https://chekos.dev/assets/images/social/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image.png" type="image/png" length="None" /> </item> <item> <title>Jq [] Syntax</title> <category>jq</category> <category>shell</category> <category>til</category> <description>&lt;h1&gt;about jq &lt;code&gt;[ ]&lt;/code&gt; syntax&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;If you want to dump a list of objects you’re constructing from some other json you need to wrap your entire &lt;code&gt;jq&lt;/code&gt; string in square brackets ( &lt;code&gt;[]&lt;/code&gt; ). Otherwise you’ll be writing each object one at a time and that’s not valid JSON.For example, running something like&lt;/p&gt;&lt;p&gt;&lt;code&gt;shelljq &#39;.[] | {id: .id, title: .title, created: .created }&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;returns →&lt;/p&gt;&lt;p&gt;&lt;code&gt;json{ id: &#34;123&#34;, title: &#34;page 1&#34;, created: &#34;2022-01-25T23:15:00.000Z&#34;}{ id: &#34;124&#34;, title: &#34;page 2&#34;, created: &#34;2022-01-26T13:18:15.000Z&#34;}{ id: &#34;125&#34;, title: &#34;page 3&#34;, created: &#34;2022-01-27T18:37:05.000Z&#34;}&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This file is not valid JSON. However, if you wrap your entire expression in square brackets &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;jq&lt;/code&gt; will group these all as a list of objects instead of appending each object at a time.&lt;/p&gt;&lt;p&gt;&lt;code&gt;shelljq &#39;[.[] | { id: .id, title: .title, created: .created }]&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;returns →&lt;/p&gt;&lt;p&gt;&lt;code&gt;json[ { &#34;id&#34;: &#34;123&#34;, &#34;title&#34;: &#34;page 1&#34;, &#34;created&#34;: &#34;2022-01-25T23:15:00.000Z&#34; }, { &#34;id&#34;: &#34;124&#34;, &#34;title&#34;: &#34;page 2&#34;, &#34;created&#34;: &#34;2022-01-26T13:18:15.000Z&#34; }, { &#34;id&#34;: &#34;125&#34;, &#34;title&#34;: &#34;page 3&#34;, &#34;created&#34;: &#34;2022-01-27T18:37:05.000Z&#34; }]&lt;/code&gt;&lt;/p&gt;</description><link>https://chekos.dev/2022/01/jq--syntax/</link> <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2022/01/jq--syntax/</guid> <enclosure url="https://chekos.dev/assets/images/social/2022/01/jq--syntax.png" type="image/png" length="None" /> </item> <item> <title>How To Execute A Shell Script In The Current Shell</title> <category>shell</category> <category>til</category> <description>&lt;h1&gt;how to execute a shell script in the current shell&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;when you execute a shell script, it defaults to creating a new shell, executing the script in that shell and closing it. if you want to, for example, set environmental variables you would need to run the script in the current shell.let&#39;s say you want to have a short shell script that sets the database url as an environmental variable called &lt;code&gt;env_vars.sh&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;```shell&lt;/p&gt;&lt;h1&gt;!/bin/bash&lt;/h1&gt;&lt;p&gt;export DATABASE_URL=&#34;super_secret_url&#34;```&lt;/p&gt;&lt;p&gt;if you run&lt;/p&gt;&lt;p&gt;&lt;code&gt;shellsh env_vars.sh&lt;/code&gt;&lt;/p&gt;&lt;p&gt;in your terminal, it would run said script in a new shell and therefore those environmental variables would not be set in your current shell and would then be unavailable to your other scripts.&lt;/p&gt;&lt;p&gt;to run that in your current shell you use the following syntax&lt;/p&gt;&lt;p&gt;&lt;code&gt;shell. ./env_vars.sh&lt;/code&gt;&lt;/p&gt;&lt;p&gt;this way your environmental variables are set in your current shell and you can use them as expected.&lt;/p&gt;</description><link>https://chekos.dev/2021/09/how-to-execute-a-shell-script-in-the-current-shell/</link> <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2021/09/how-to-execute-a-shell-script-in-the-current-shell/</guid> <enclosure url="https://chekos.dev/assets/images/social/2021/09/how-to-execute-a-shell-script-in-the-current-shell.png" type="image/png" length="None" /> </item> <item> <title>Haciendo datos abiertos más accesibles con datasette</title> <category>data projects</category> <category>datasette</category> <category>python</category> <category>sql</category> <description>Proporcionar los datos es el primer paso, pero para que sean utilizables y accesibles para la mayoría de las personas, no podemos simplemente publicar datos.</description><link>https://chekos.dev/2020/06/haciendo-datos-abiertos-m%C3%A1s-accesibles-con-datasette/</link> <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/06/haciendo-datos-abiertos-m%C3%A1s-accesibles-con-datasette/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/06/haciendo-datos-abiertos-más-accesibles-con-datasette.png" type="image/png" length="75435" /> </item> <item> <title>About Myst-Parser, Es Markdown Pero Rst</title> <category>docs</category> <category>sphinx</category> <category>til</category> <description>&lt;h1&gt;about &lt;code&gt;myst-parser&lt;/code&gt;, es markdown pero rst&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;MyST-parser is &lt;strong&gt;so easy to use&lt;/strong&gt; and it provides all the functionality i need to make docs without using rST.&lt;/p&gt;</description><link>https://chekos.dev/2020/06/about-myst-parser-es-markdown-pero-rst/</link> <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/06/about-myst-parser-es-markdown-pero-rst/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/06/about-myst-parser-es-markdown-pero-rst.png" type="image/png" length="None" /> </item> <item> <title>Escaping Liquid Tags With {% Raw %}</title> <category>jekyll</category> <category>liquid tags</category> <category>til</category> <description>&lt;h1&gt;about escaping liquid tags with &lt;code&gt;{% Raw %}&lt;/code&gt;&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;you can use the tags &lt;code&gt;raw&lt;/code&gt; and &lt;code&gt;endraw&lt;/code&gt; to escape liquid tags.&lt;/p&gt;</description><link>https://chekos.dev/2020/06/escaping-liquid-tags-with--raw-/</link> <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/06/escaping-liquid-tags-with--raw-/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/06/escaping-liquid-tags-with--raw-.png" type="image/png" length="0" /> </item> <item> <title>About Liquid Tags</title> <category>jekyll</category> <category>liquid tags</category> <category>til</category> <description>&lt;h1&gt;about liquid tags&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;shopify has a github pages site documenting liquid tags which is very useful and easy to use.&lt;/p&gt;</description><link>https://chekos.dev/2020/06/about-liquid-tags/</link> <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/06/about-liquid-tags/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/06/about-liquid-tags.png" type="image/png" length="None" /> </item> <item> <title>About Jekyll-Archives</title> <category>jekyll</category> <category>til</category> <description>&lt;h1&gt;about &lt;code&gt;jekyll-archives&lt;/code&gt;&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;there&#39;s a jekyll-plugin named &lt;code&gt;jekyll-archives&lt;/code&gt; that lets you create archives of your posts based on metadata/front matter.&lt;/p&gt;&lt;p&gt;i used it for &lt;a href=&#34;https://socialtech.us/&#34;&gt;socialtech.us&lt;/a&gt; to create a &lt;code&gt;category/${category}&lt;/code&gt; page for each of the categories in the site (created dynamically).&lt;/p&gt;</description><link>https://chekos.dev/2020/05/about-jekyll-archives/</link> <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/05/about-jekyll-archives/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/05/about-jekyll-archives.png" type="image/png" length="None" /> </item> <item> <title>You Can&#39;T Use Special Characters In Unix Commands If You Use Single-Quotes</title> <category>til</category> <category>unix</category> <description>&lt;h1&gt;about special characters in unix commands&lt;/h1&gt;&lt;h2&gt;what i learned&lt;/h2&gt;&lt;p&gt;You can&#39;t insert variables in Unix commands if you&#39;re using single quotes.&lt;/p&gt;&lt;p&gt;this won&#39;t work&lt;/p&gt;&lt;p&gt;```shellexport SECRET=&#34;huh&#34;&lt;/p&gt;&lt;p&gt;echo &#39;you can not see my secret $SECRET&#39;```&lt;/p&gt;&lt;p&gt;but this will&lt;/p&gt;&lt;p&gt;```shellexport SECRET=&#34;huh&#34;&lt;/p&gt;&lt;p&gt;echo &#34;you can see my secret $SECRET&#34;```&lt;/p&gt;</description><link>https://chekos.dev/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes/</link> <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate><source url="https://chekos.dev/feed_rss_created.xml">chekos' webblog</source><guid isPermaLink="true">https://chekos.dev/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes/</guid> <enclosure url="https://chekos.dev/assets/images/social/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes.png" type="image/png" length="None" /> </item> </channel></rss>