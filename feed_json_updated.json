{"version": "https://jsonfeed.org/version/1", "title": "chekos' webblog", "home_page_url": "https://chekos.dev/", "feed_url": "https://chekos.dev/feed_json_updated.json", "description": "chekos' weblog", "icon": null, "authors": [{"name": "chekos"}], "language": "en", "items": [{"id": "https://chekos.dev/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies/", "url": "https://chekos.dev/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies/", "title": "using typer and uv to run a script with inline dependencies", "content_html": "<h1>using typer and uv to run a script with inline dependencies</h1>\n<h2>what i learned</h2>\n<p>because <code>uv</code> supports running scripts with dependencies declared in inline metadata and <code>typer</code> can turn any function into a cli you can put both of them together and build some really powerful small utilities. all you need is to define a function and wrap it in <code>typer.run()</code> in a script with <code>typer</code> as a dependency in the inline metadata.</p>\n<p>after some iterations, this is the final script (so far):</p>\n<p>```python title=\"issue-to-md.py\"</p>\n<h1>/// script</h1>\n<h1>dependencies = [</h1>\n<h1>\"typer\",</h1>\n<h1>\"rich\",</h1>\n<h1>\"pyyaml\",</h1>\n<h1>]</h1>\n<h1>///</h1>\n<p>import json\nimport re\nfrom datetime import datetime\nfrom pathlib import Path\nfrom zoneinfo import ZoneInfo</p>\n<p>import typer\nimport yaml\nfrom rich import print\nfrom typing_extensions import Annotated</p>\n<p>def generate_post_from_issue(\n    issue_title: Annotated[str, typer.Option(\"--title\", \"-t\")],\n    issue_body: Annotated[str, typer.Option(\"--body\", \"-b\")],\n    issue_labels: Annotated[str, typer.Option(\"--labels\", \"-l\")],\n    issue_created_at: Annotated[str, typer.Option(\"--created-at\", \"-c\")],\n    base_dir: Annotated[str, typer.Option(\"--base-dir\", \"-d\")] = \"blog/posts\",\n):\n    # Convert labels to a list of tags\n    tags = [label[\"name\"] for label in json.loads(issue_labels)]</p>\n<pre><code># Convert ISSUE_CREATED_AT to PST and format as YYYY-MM-DD\nutc_time = datetime.strptime(issue_created_at, \"%Y-%m-%dT%H:%M:%SZ\")\npst_time = utc_time.astimezone(ZoneInfo(\"America/Los_Angeles\"))\ncreated_at_pst = pst_time.date()\n\n# Extract the category from the part of the title before the first colon, default to \"project\" if none\ncategory = (\n    issue_title.split(\":\")[0].strip().lower() if \":\" in issue_title else \"project\"\n)\n\n# Extract the title content after the first colon\ntitle = (\n    issue_title.split(\":\", 1)[1].strip()\n    if \":\" in issue_title\n    else issue_title.strip()\n)\n\n# Determine directory based on category\ndir_path = Path(base_dir) / (\"til\" if category == \"til\" else \"\")\ndir_path.mkdir(parents=True, exist_ok=True)\n\n# Generate a slugified version of the title for the filename\nslug = re.sub(r\"[^a-z0-9]+\", \"-\", title.lower()).strip(\"-\")\n\n# Create the front matter dictionary\nfront_matter = {\n    \"title\": title,\n    \"date\": created_at_pst,\n    \"categories\": [category],\n    \"tags\": tags,\n}\n\n# Prepare YAML front matter and issue body\nyaml_front_matter = yaml.dump(front_matter, default_flow_style=False)\ncontent = f\"---\\n{yaml_front_matter}---\\n\\n{issue_body}\"\n\n# Define filename\nfilename = dir_path / f\"{slug}.md\"\n\n# Write content to file\nfilename.write_text(content, encoding=\"utf-8\")\n\nprint(f\"Markdown file created: {filename}\")\n</code></pre>\n<p>if <strong>name</strong> == \"<strong>main</strong>\":\n    typer.run(generate_post_from_issue)\n```</p>\n<p>feels like a micro-package.</p>", "image": "https://chekos.dev/assets/images/social/2024/11/using-typer-and-uv-to-run-a-script-with-inline-dependencies.png", "date_modified": "2025-07-20T18:54:27.157429+00:00", "authors": [], "tags": ["micro-packages", "python", "til", "uv"]}, {"id": "https://chekos.dev/2022/08/using-github-actions-to-produce-example-images-of-code/", "url": "https://chekos.dev/2022/08/using-github-actions-to-produce-example-images-of-code/", "title": "Using Github Actions To Produce Example Images Of Code", "content_html": "<h1>how to use gh-actions to produce example images of code</h1>\n<h2>what i learned</h2>\n<p>I learned to chain a lot of small tools using GitHub Actions to produce ready-to-share images of code examples for social media (namely, instagram and twitter) from my phone. The steps, generally speaking, go as follows:</p>\n<ol>\n<li>Create a new page on a Notion Database. Probably will create a specific template for this, like I do with TIL\u2019s but it\u2019s not necessary.</li>\n<li>GitHub Action: Use my <code>markdownify-notion</code> python package to write the markdown version of this page and save it on a \u201cquarto project\u201d folder. This let\u2019s me use one general front-matter yaml file for all files rather than automate adding front matter to each file. I can still add specific front matter to files if I want to. (this TIL is an example of how this works - I\u2019m writing it on Notion on my phone.)</li>\n<li>GitHub Action: Use Quarto to render this markdown file <code>--to html</code> and save it on an \u201coutput\u201d directory. This will execute the code in the code cells and save the output inline.</li>\n<li>GitHub Action: Use <code>shot-scraper</code> to produce two files: a png screenshot and a pdf file. I\u2019m using <code>shot-scraper</code> for the PDF as well rather than using quarto because it\u2019s easier and I am not in need of customizing this pdf file at all just yet. I\u2019m creating it and saving it essentially just because I can, it\u2019s easy, and might find use for it later.</li>\n<li>GitHub Action: Once there are new png or pdf files in the \u201coutput\u201d directory, I then use <code>s3-credentials</code> to <em>put</em> those <em>objects</em> on a S3 bucket I also created using <code>s3-credentials</code> . This tool is fantastic s3-credentials.readthedocs.io</li>\n</ol>\n<p>This is how the final image looks like</p>\n<p><img alt=\"9EB00936-09DE-4836-93B6-8504E7E036A8\" src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/04380cef-2bfc-43f9-a2af-5feed89f0ac4/9EB00936-09DE-4836-93B6-8504E7E036A8.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20221216%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20221216T205710Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=fa6ba352215a639f6a8d3c89cb72397e0d310da5ef891c439e528def853f20dc&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject\"></p>", "image": "https://chekos.dev/assets/images/social/2022/08/using-github-actions-to-produce-example-images-of-code.png", "date_modified": "2025-07-20T18:54:27.095103+00:00", "authors": [], "tags": ["gh-actions", "notion", "python", "quarto", "til"]}, {"id": "https://chekos.dev/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck/", "url": "https://chekos.dev/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck/", "title": "how to open specific channel in Slack app using Stream Deck", "content_html": "<h1>how to open specific channel in Slack app using Stream Deck</h1>\n<h2>what i learned</h2>\n<p>you can open a specific channel/DM conversation on the slack app using the open website action on stream deck but pointing ot to <code>slack://channel?team=&lt;Workspace ID&gt;&amp;id=&lt;Channel / teammate ID&gt;</code>. </p>", "image": "https://chekos.dev/assets/images/social/2023/06/how-to-open-specific-channel-in-slack-app-using-stream-deck.png", "date_modified": "2025-07-20T18:54:27.051236+00:00", "authors": [], "tags": ["automation", "streamdeck", "til"]}, {"id": "https://chekos.dev/2024/11/running-sudo-commands-without-password-on-vps/", "url": "https://chekos.dev/2024/11/running-sudo-commands-without-password-on-vps/", "title": "Running sudo commands without password on VPS", "content_html": "<h1>running sudo commands without password on VPS</h1>\n<h2>what i learned</h2>\n<p>you can configure your VPS / server to be able to run <code>sudo</code> commands without being asked for your password. you just need to create a sudoers file. </p>\n<ul>\n<li>\n<p>first you have to create sudoers file\n<code>bash\nsudo visudo -f /etc/sudoers.d/$USER</code></p>\n<blockquote>\n<p>when i asked chatgpt for this i found you can just run <code>sudo visudo</code> and it\u2019ll open the sudoers file. </p>\n</blockquote>\n</li>\n<li>\n<p>now, let\u2019s say you have a user <code>app</code> that you want to be able to run <code>apt update</code> and <code>apt upgrade</code> without asking for <code>sudo</code> password. you need to add this line to your sudoers file\n<code>bash\napp ALL=(ALL) NOPASSWD:/usr/bin/apt update, /usr/bin/apt upgrade</code></p>\n</li>\n</ul>\n<h3>how it works</h3>\n<ol>\n<li><code>app</code> - the username on the system </li>\n<li><code>ALL=(ALL)</code> - this means this rule to all hosts and allows acting as any user</li>\n<li><code>NOPASSWD</code> - no password</li>\n<li><code>/usr/bin/apt update</code> - you must pass the full path for the commands you want to run without a password. </li>\n</ol>", "image": "https://chekos.dev/assets/images/social/2024/11/running-sudo-commands-without-password-on-vps.png", "date_modified": "2025-07-20T18:54:27.002953+00:00", "authors": [], "tags": ["shell", "til", "vps"]}, {"id": "https://chekos.dev/2024/11/i-just-set-up-alias-uvr--uv-run/", "url": "https://chekos.dev/2024/11/i-just-set-up-alias-uvr--uv-run/", "title": "i just set up `alias uvr = \"uv run\"`", "content_html": "<h2>what i learned</h2>\n<p>i just set up a new alias to save some time when using <code>uv</code></p>\n<p><code>bash title=\"~/.oh-my-zsh/custom/uv.zsh\"\nalias uvr = \"uv run\"</code></p>", "image": "https://chekos.dev/assets/images/social/2024/11/i-just-set-up-alias-uvr--uv-run.png", "date_modified": "2025-07-20T18:54:26.950218+00:00", "authors": [], "tags": ["python", "til", "uv"]}, {"id": "https://chekos.dev/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner/", "url": "https://chekos.dev/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner/", "title": "how to trigger a gh-action only if the issue is created by the repo owner", "content_html": "<h2>what i learned</h2>\n<p>you can add an <code>if</code> key to a job to conditionally run jobs. you also have a lot of metadata available in github actions regarding the event that triggered it and the repo it is on. </p>\n<p>put together you can add a condition like:\n<code>yaml title=\".github/workflows/issue-to-md.yml\"\n...\njob:\n  job_name:\n    runs_on: ubuntu\n    if: ${{ github.event.issue.user.login == github.repository_owner }}\n...</code></p>", "image": "https://chekos.dev/assets/images/social/2024/11/how-to-trigger-a-gh-action-only-if-the-issue-is-created-by-the-repo-owner.png", "date_modified": "2025-07-20T18:54:26.901892+00:00", "authors": [], "tags": ["devops", "gh-actions", "til"]}, {"id": "https://chekos.dev/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image/", "url": "https://chekos.dev/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image/", "title": "How To Solve Permission Error From Airflow Official Docker Image", "content_html": "<h1>how to solve permission error from airflow official docker image</h1>\n<h2>what i learned</h2>\n<p>tl;dr: when you use the Airflow official docker image you need to make sure that the variable <code>AIRFLOW_UID</code> is set to match <strong>your</strong> UID (and <code>AIRFLOW_GID=0</code> aka <code>root</code> ) or you\u2019re going to get permission errors.\ni was working on deploying Airflow on a VM at work this week and I got a permission error (Errno 13) regarding the containers\u2019 python\u2019s logging config. When I first started working with this <code>docker-compose.yml</code> i used the suggested <code>echo -e \"AIRFLOW_UID=$(id -u)\" &gt; .env</code> command which provided my user id (let\u2019s say it\u2019s <strong>506</strong> ) from my local machine and assigned it to the <code>AIRFLOW_UID</code> key. Now that i am working in the VM and have extended my <code>.env</code> file to include other information i figured i could just use a copy of the same file. Everything else works fine except airflow cannot write logs because the user in this virtual machine with user id <strong>506</strong> does not have permission to write to this <code>./logs/</code> directory.\nIf you google this error i found \u2014 among a sea of <em>almost</em> right answers \u2014 that most of the solutions online are variations of \u201cchange the logs folder\u2019s permissions to 777\u201d meaning anyone can read, write, and execute the contents of the logs. That works. However, you don\u2019t really need <em>everyone</em> to be able to read and write \u2014 just this airflow user.\nUpdating the UID on the VM\u2019s <code>.env</code> file worked perfectly without having to mess with the permissions.</p>", "image": "https://chekos.dev/assets/images/social/2022/01/how-to-solve-permission-error-from-airflow-official-docker-image.png", "date_modified": "2025-07-20T18:54:26.854096+00:00", "authors": [], "tags": ["airflow", "docker", "python", "til"]}, {"id": "https://chekos.dev/2023/04/setting-up-ffmpeg-as-lambda-layer/", "url": "https://chekos.dev/2023/04/setting-up-ffmpeg-as-lambda-layer/", "title": "Setting Up Ffmpeg As Lambda Layer", "content_html": "<h1>how to set up <code>ffmpeg</code> as a lambda layer</h1>\n<h2>what i learned</h2>\n<p>how to add <code>ffmpeg</code> and <code>ffprobe</code> as a lambda layer to be used by lambda functions.</p>\n<h3>Getting ffmpeg</h3>\n<p>```shell</p>\n<h1>ffmpeg</h1>\n<p>wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz</p>\n<h1>checksum</h1>\n<p>wget https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz.md5</p>\n<p>md5sum -c ffmpeg-release-amd64-static.tar.xz.md5</p>\n<h1>extract</h1>\n<p>tar xvf ffmpeg-release-amd64-static.tar.xz\n```</p>\n<p><strong>Side note</strong>: i had to <code>brew install md5sha1sum</code> and <code>brew install wget</code> on my local laptop</p>\n<h3>Creating Lambda Layer</h3>\n<ol>\n<li>create <code>ffmpeg/bin/</code></li>\n<li>copy <code>ffmpeg</code> into it</li>\n<li>zip <code>ffmpeg/</code></li>\n</ol>\n<p>```shell</p>\n<h1>Create bin/</h1>\n<p>mkdir -p ffmpeg/bin</p>\n<h1>Copy ffmpeg</h1>\n<p>cp ffmpeg-6.0-amd64-static/ffmpeg ffmpeg/bin</p>\n<h1>Zip directory</h1>\n<p>cd ffmpeg\nzip -r ../ffmpeg.zip .\n```</p>\n<h3>Finally</h3>\n<p>Upload zip file as a lambda layer.</p>\n<h3>Bonus</h3>\n<p>In my case I also included <code>ffprobe</code> as it's also required for <code>whisper</code>.</p>", "image": "https://chekos.dev/assets/images/social/2023/04/setting-up-ffmpeg-as-lambda-layer.png", "date_modified": "2025-07-20T18:54:26.798618+00:00", "authors": [], "tags": ["aws", "ffmpeg", "serverless", "til"]}, {"id": "https://chekos.dev/2021/09/how-to-execute-a-shell-script-in-the-current-shell/", "url": "https://chekos.dev/2021/09/how-to-execute-a-shell-script-in-the-current-shell/", "title": "How To Execute A Shell Script In The Current Shell", "content_html": "<h1>how to execute a shell script in the current shell</h1>\n<h2>what i learned</h2>\n<p>when you execute a shell script, it defaults to creating a new shell, executing the script in that shell and closing it. if you want to, for example, set environmental variables you would need to run the script in the current shell.\nlet's say you want to have a short shell script that sets the database url as an environmental variable called <code>env_vars.sh</code>.</p>\n<p>```shell</p>\n<h1>!/bin/bash</h1>\n<p>export DATABASE_URL=\"super_secret_url\"\n```</p>\n<p>if you run</p>\n<p><code>shell\nsh env_vars.sh</code></p>\n<p>in your terminal, it would run said script in a new shell and therefore those environmental variables would not be set in your current shell and would then be unavailable to your other scripts.</p>\n<p>to run that in your current shell you use the following syntax</p>\n<p><code>shell\n. ./env_vars.sh</code></p>\n<p>this way your environmental variables are set in your current shell and you can use them as expected.</p>", "image": "https://chekos.dev/assets/images/social/2021/09/how-to-execute-a-shell-script-in-the-current-shell.png", "date_modified": "2025-07-20T18:54:26.746577+00:00", "authors": [], "tags": ["shell", "til"]}, {"id": "https://chekos.dev/2022/12/how-to-create-an-alias-in-the-gh-cli/", "url": "https://chekos.dev/2022/12/how-to-create-an-alias-in-the-gh-cli/", "title": "How To Create An Alias In The gh-cli", "content_html": "<h1>how to create an alias in the <code>gh</code> CLI</h1>\n<h2>what i learned</h2>\n<p>you can create aliases in the GitHub CLI. i'm not super familiar with aliases. i've used them in the past to automate long commands.\ncurrently i'm using a couple at work to shorten <code>dbt</code> commmands ever so slightly (from <code>dbt run --target prod --select &lt;models&gt;</code> to <code>prod-run &lt;selection query&gt;</code>).</p>\n<p>however, i had only seen these as aliases one sets up at the <em>profile</em> level/scope. as in, we'd go to <code>~/.bash_profile</code> or <code>~/.zsh_profile</code> and add a new alias that's set every time we open a new terminal.</p>\n<p>this is the first time i see a cli offer that <em>within</em> the tool itself. i wonder if this is a common practice i've missed until now.</p>\n<p>in the GitHub cli you can use the command <code>alias set</code> to set an alias (<a href=\"https://cli.github.com/manual/gh_alias_set\">docs</a>).</p>\n<p>i usually have to google the full list of flags i would like to run when creating a repo via the <code>gh-cli</code> so i figured i'd save it as an alias now. this is why i ~~wish i remembered~~ would like to run most times:</p>\n<p><code>shell\ngh repo create &lt;name&gt; \\\n--public \\\n--add-readme \\\n--clone \\\n--gitignore Python \\\n--license bsd-3-clause-clear</code></p>\n<p>simply <em>create a public repo named <name> include a ReadME, a license and a gitignore file and finally clone it to the local directory.</em></p>\n<p>i might add the <code>--disable-wiki</code> simply because i don't use the wikis.</p>\n<p>from the docs:</p>\n<blockquote>\n<p><em>The expansion may specify additional arguments and flags. If the expansion includes positional placeholders such as \"$1\", extra arguments that follow the alias will be inserted appropriately. Otherwise, extra arguments will be appended to the expanded command.</em></p>\n</blockquote>\n<p>so what i did was run</p>\n<p><code>shell\ngh alias set pyrepo 'repo create \"$1\" --public --add-readme --clone --gitignore=Python --license=bsd-3-clause-clear'</code></p>\n<p>and if i choose to i can add a description by adding <code>-d \"my repos description\"</code> right after <code>gh pyrepo &lt;name&gt;</code></p>", "image": "https://chekos.dev/assets/images/social/2022/12/how-to-create-an-alias-in-the-gh-cli.png", "date_modified": "2025-07-20T18:54:26.697331+00:00", "authors": [], "tags": ["automation", "gh", "til"]}, {"id": "https://chekos.dev/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal/", "url": "https://chekos.dev/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal/", "title": "How To Copy Json Straight To Clipboard From The Terminal", "content_html": "<h1>how to copy json to clipboard from the terminal</h1>\n<h2>what i learned</h2>\n<p>Piping output to <code>pbcopy</code> to copy and paste output from the terminal</p>\n<p>Here's how I can grab the last 10 elements of a JSON array and copy them to my clipboard.</p>\n<p><code>shell\njq '.[-10:]' mydata.json | pbcopy</code></p>", "image": "https://chekos.dev/assets/images/social/2022/12/how-to-copy-json-straight-to-clipboard-from-the-terminal.png", "date_modified": "2025-07-20T18:54:26.638256+00:00", "authors": [], "tags": ["jq", "shell", "til"]}, {"id": "https://chekos.dev/2024/11/creating-til-posts-from-github-issues-using-github-actions/", "url": "https://chekos.dev/2024/11/creating-til-posts-from-github-issues-using-github-actions/", "title": "creating til posts from github issues using github actions", "content_html": "<h1>creating til posts from github issues using github actions</h1>\n<h2>what i learned</h2>\n<p>you can automate creating a new markdown file in a directory in your repo with front matter metadata from github issues. you can then create a pull request to deploy those changes to your main branch. my plan is to use this to capture more ideas on the go (on my phone).</p>\n<p>```yaml title=\".github/workflows/issue-to-md.yml\"\nname: Create Post from Issue</p>\n<p>permissions:\n  contents: write\n  pull-requests: write</p>\n<p>on:\n  issues:\n    types: [opened]</p>\n<p>jobs:\n  create-post:\n    runs-on: ubuntu-latest</p>\n<pre><code>steps:\n  - name: Checkout repository\n    uses: actions/checkout@v4\n\n  - name: Generate Post from Issue\n    env:\n      ISSUE_NUMBER: ${{ github.event.issue.number }}\n      ISSUE_TITLE: ${{ github.event.issue.title }}\n      ISSUE_BODY: ${{ github.event.issue.body }}\n      ISSUE_LABELS: ${{ toJson(github.event.issue.labels) }}\n      ISSUE_CREATED_AT: ${{ github.event.issue.created_at }}\n    run: |\n      # Convert labels to a list of tags\n      TAGS=$(echo $ISSUE_LABELS | jq -r '.[] | .name' | paste -sd, -)\n\n      # Convert ISSUE_CREATED_AT to PST and format as YYYY-MM-DD\n      CREATED_AT_PST=$(TZ=\"America/Los_Angeles\" date -d \"${ISSUE_CREATED_AT}\" +\"%Y-%m-%d\")\n\n      # Extract the category from the part of the title before the first colon, default to \"project\" if none\n      CATEGORY=$(echo \"$ISSUE_TITLE\" | awk -F: '{print $1}' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')\n      if [ -z \"$CATEGORY\" ]; then\n        CATEGORY=\"project\"\n      fi\n\n      # Extract the title content after the first colon\n      TITLE=$(echo \"$ISSUE_TITLE\" | sed 's/^[^:]*: *//')\n\n      # Determine directory based on category\n      if [ \"$CATEGORY\" = \"til\" ]; then\n        DIR=\"blog/posts/til\"\n      else\n        DIR=\"blog/posts\"\n      fi\n      echo $DIR &gt;&gt; $GITHUB_STEP_SUMMARY\n      echo $CATEGORY &gt;&gt; $GITHUB_STEP_SUMMARY\n\n      # Generate a slugified version of the title for the filename\n      SLUG=$(echo \"$TITLE\" | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '-' | sed 's/^-//;s/-$//')\n\n      echo $SLUG &gt;&gt; $GITHUB_STEP_SUMMARY\n\n      # Create the front matter with category, tags, and formatted date\n      FRONT_MATTER=\"---\\ntitle: \\\"$TITLE\\\"\\ndate: ${CREATED_AT_PST}\\ncategories: [${CATEGORY}]\\ntags: [${TAGS}]\\n---\"\n\n      # Prepare content for markdown file\n      CONTENT=\"$FRONT_MATTER\\n\\n$ISSUE_BODY\"\n\n      # Save the content to a markdown file\n      FILENAME=\"${DIR}/${SLUG}.md\"\n      echo $FILENAME &gt;&gt; $GITHUB_STEP_SUMMARY\n      echo -e \"$CONTENT\" &gt; \"$FILENAME\"\n\n  - name: Commit and push changes\n    env: \n      ISSUE_TITLE: ${{ github.event.issue.title }}\n      ISSUE_NUMBER: ${{ github.event.issue.number }}\n      GH_TOKEN: ${{ github.token }}\n    run: |\n      git config --local user.name \"github-actions[bot]\"\n      git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n      git checkout -b add-post-$ISSUE_NUMBER\n      git add .\n      git commit -m \"Add post for Issue: $ISSUE_TITLE\"\n      git push -u origin add-post-$ISSUE_NUMBER\n      gh pr create --title \"#$ISSUE_NUMBER - $ISSUE_TITLE\" --body \"Adding new post. Closes #$ISSUE_NUMBER\"\n</code></pre>\n<p>```</p>", "image": "https://chekos.dev/assets/images/social/2024/11/creating-til-posts-from-github-issues-using-github-actions.png", "date_modified": "2025-07-20T18:54:26.584073+00:00", "authors": [], "tags": ["til"]}, {"id": "https://chekos.dev/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes/", "url": "https://chekos.dev/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes/", "title": "You Can'T Use Special Characters In Unix Commands If You Use Single-Quotes", "content_html": "<h1>about special characters in unix commands</h1>\n<h2>what i learned</h2>\n<p>You can't insert variables in Unix commands if you're using single quotes.</p>\n<p>this won't work</p>\n<p>```shell\nexport SECRET=\"huh\"</p>\n<p>echo 'you can not see my secret $SECRET'\n```</p>\n<p>but this will</p>\n<p>```shell\nexport SECRET=\"huh\"</p>\n<p>echo \"you can see my secret $SECRET\"\n```</p>", "image": "https://chekos.dev/assets/images/social/2020/05/you-cant-use-special-characters-in-unix-commands-if-you-use-single-quotes.png", "date_modified": "2025-07-20T18:54:26.527345+00:00", "authors": [], "tags": ["til", "unix"]}, {"id": "https://chekos.dev/2020/06/about-myst-parser-es-markdown-pero-rst/", "url": "https://chekos.dev/2020/06/about-myst-parser-es-markdown-pero-rst/", "title": "About Myst-Parser, Es Markdown Pero Rst", "content_html": "<h1>about <code>myst-parser</code>, es markdown pero rst</h1>\n<h2>what i learned</h2>\n<p>MyST-parser is <strong>so easy to use</strong> and it provides all the functionality i need to make docs without using rST.</p>", "image": "https://chekos.dev/assets/images/social/2020/06/about-myst-parser-es-markdown-pero-rst.png", "date_modified": "2025-07-20T18:54:26.475756+00:00", "authors": [], "tags": ["docs", "sphinx", "til"]}, {"id": "https://chekos.dev/2020/06/about-liquid-tags/", "url": "https://chekos.dev/2020/06/about-liquid-tags/", "title": "About Liquid Tags", "content_html": "<h1>about liquid tags</h1>\n<h2>what i learned</h2>\n<p>shopify has a github pages site documenting liquid tags which is very useful and easy to use.</p>", "image": "https://chekos.dev/assets/images/social/2020/06/about-liquid-tags.png", "date_modified": "2025-07-20T18:54:26.430839+00:00", "authors": [], "tags": ["jekyll", "liquid tags", "til"]}, {"id": "https://chekos.dev/2022/01/jq--syntax/", "url": "https://chekos.dev/2022/01/jq--syntax/", "title": "Jq [] Syntax", "content_html": "<h1>about jq <code>[ ]</code> syntax</h1>\n<h2>what i learned</h2>\n<p>If you want to dump a list of objects you\u2019re constructing from some other json you need to wrap your entire <code>jq</code> string in square brackets ( <code>[]</code> ). Otherwise you\u2019ll be writing each object one at a time and that\u2019s not valid JSON.\nFor example, running something like</p>\n<p><code>shell\njq '.[] | {id: .id, title: .title, created: .created }'</code></p>\n<p>returns \u2192</p>\n<p><code>json\n{\n    id: \"123\",\n    title: \"page 1\",\n    created: \"2022-01-25T23:15:00.000Z\"\n}\n{\n    id: \"124\",\n    title: \"page 2\",\n    created: \"2022-01-26T13:18:15.000Z\"\n}\n{\n    id: \"125\",\n    title: \"page 3\",\n    created: \"2022-01-27T18:37:05.000Z\"\n}</code></p>\n<p>This file is not valid JSON. However, if you wrap your entire expression in square brackets <code>[]</code> <code>jq</code> will group these all as a list of objects instead of appending each object at a time.</p>\n<p><code>shell\njq '[.[] | { id: .id, title: .title, created: .created }]'</code></p>\n<p>returns \u2192</p>\n<p><code>json\n[\n  {\n    \"id\": \"123\",\n    \"title\": \"page 1\",\n    \"created\": \"2022-01-25T23:15:00.000Z\"\n  },\n  {\n    \"id\": \"124\",\n    \"title\": \"page 2\",\n    \"created\": \"2022-01-26T13:18:15.000Z\"\n  },\n  {\n    \"id\": \"125\",\n    \"title\": \"page 3\",\n    \"created\": \"2022-01-27T18:37:05.000Z\"\n  }\n]</code></p>", "image": "https://chekos.dev/assets/images/social/2022/01/jq--syntax.png", "date_modified": "2025-07-20T18:54:26.366528+00:00", "authors": [], "tags": ["jq", "shell", "til"]}, {"id": "https://chekos.dev/2020/05/about-jekyll-archives/", "url": "https://chekos.dev/2020/05/about-jekyll-archives/", "title": "About Jekyll-Archives", "content_html": "<h1>about <code>jekyll-archives</code></h1>\n<h2>what i learned</h2>\n<p>there's a jekyll-plugin named <code>jekyll-archives</code> that lets you create archives of your posts based on metadata/front matter.</p>\n<p>i used it for <a href=\"https://socialtech.us/\">socialtech.us</a> to create a <code>category/${category}</code> page for each of the categories in the site (created dynamically).</p>", "image": "https://chekos.dev/assets/images/social/2020/05/about-jekyll-archives.png", "date_modified": "2025-07-20T18:54:26.299134+00:00", "authors": [], "tags": ["jekyll", "til"]}, {"id": "https://chekos.dev/2020/06/escaping-liquid-tags-with--raw-/", "url": "https://chekos.dev/2020/06/escaping-liquid-tags-with--raw-/", "title": "Escaping Liquid Tags With {% Raw %}", "content_html": "<h1>about escaping liquid tags with <code>{% Raw %}</code></h1>\n<h2>what i learned</h2>\n<p>you can use the tags <code>raw</code> and <code>endraw</code> to escape liquid tags.</p>", "image": "https://chekos.dev/assets/images/social/2020/06/escaping-liquid-tags-with--raw-.png", "date_modified": "2025-07-20T18:54:26.291249+00:00", "authors": [], "tags": ["jekyll", "liquid tags", "til"]}, {"id": "https://chekos.dev/2025/07/of-brasas--nube/", "url": "https://chekos.dev/2025/07/of-brasas--nube/", "title": "Of Brasas &amp; Nube", "content_html": "<h1>Of Brasas &amp; Nube</h1>\n<p>!!! note \"Translation Note\"\n    This is an English translation of a piece originally published in Spanish on the [Tacos de Datos Substack...</p>", "image": "https://chekos.dev/assets/images/social/2025/07/of-brasas--nube.png", "date_modified": "2025-07-20T18:54:26.163272+00:00", "authors": [], "tags": ["ai", "ai-tools", "development", "parallel-time", "productivity", "reflection", "technology"]}, {"id": "https://chekos.dev/2020/02/ya-se-fueron-las-nieves-de-enero/", "url": "https://chekos.dev/2020/02/ya-se-fueron-las-nieves-de-enero/", "title": "Ya se fueron las nieves de enero", "content_html": "Si me sigues en las redes sociales tal vez conozcas de la comunidad tacosdedatos que comenc\u00e9 a inicios del 2019. La idea de tacosdedatos es crear contenido en espa\u00f1ol. Contenido sobre el an\u00e1lisis y la visualizaci\u00f3n de datos. Contenido sobre mejores pr\u00e1cticas. Contenido sobre t\u00e9cnicas y tendencias en el mundo de la tecnolog\u00eda que parecen quedarse en el mundo angloparlante por mucho tiempo antes de llegar al mundo hispanohablante.", "image": "https://chekos.dev/assets/images/social/2020/02/ya-se-fueron-las-nieves-de-enero.png", "date_modified": "2025-07-20T18:54:26.082134+00:00", "authors": [], "tags": ["personal"]}]}